// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: history.sql

package sqlc

import (
	"context"
	"time"
)

const createHistory = `-- name: CreateHistory :one
INSERT INTO history ( id
                     , uid
                     , total_kolestrol
                     , tingkat
                     , image_url
                     , created_at
                     , updated_at)
VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
    RETURNING id
`

type CreateHistoryParams struct {
	ID             string `db:"id"`
	Uid            string `db:"uid"`
	TotalKolestrol string `db:"total_kolestrol"`
	Tingkat        string `db:"tingkat"`
	ImageUrl       string `db:"image_url"`
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (string, error) {
	row := q.db.QueryRow(ctx, createHistory,
		arg.ID,
		arg.Uid,
		arg.TotalKolestrol,
		arg.Tingkat,
		arg.ImageUrl,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteHistory = `-- name: DeleteHistory :exec
DELETE
FROM history
WHERE id = $1
`

func (q *Queries) DeleteHistory(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteHistory, id)
	return err
}

const getHistory = `-- name: GetHistory :many
SELECT history.id, uid, total_kolestrol, tingkat, history.image_url, history.created_at, history.updated_at, users.id, name, email, birth_date, gender, users.image_url, users.created_at, users.updated_at
FROM history
         JOIN users ON history.uid = users.id
WHERE history.uid = $1
`

type GetHistoryRow struct {
	ID             string    `db:"id"`
	Uid            string    `db:"uid"`
	TotalKolestrol string    `db:"total_kolestrol"`
	Tingkat        string    `db:"tingkat"`
	ImageUrl       string    `db:"image_url"`
	CreatedAt      time.Time `db:"created_at"`
	UpdatedAt      time.Time `db:"updated_at"`
	ID_2           string    `db:"id_2"`
	Name           string    `db:"name"`
	Email          string    `db:"email"`
	BirthDate      string    `db:"birth_date"`
	Gender         string    `db:"gender"`
	ImageUrl_2     string    `db:"image_url_2"`
	CreatedAt_2    time.Time `db:"created_at_2"`
	UpdatedAt_2    time.Time `db:"updated_at_2"`
}

func (q *Queries) GetHistory(ctx context.Context, uid string) ([]GetHistoryRow, error) {
	rows, err := q.db.Query(ctx, getHistory, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetHistoryRow{}
	for rows.Next() {
		var i GetHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.TotalKolestrol,
			&i.Tingkat,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Email,
			&i.BirthDate,
			&i.Gender,
			&i.ImageUrl_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHistory = `-- name: UpdateHistory :one
UPDATE history
SET uid                = $2
  , total_kolestrol    = $3
  , tingkat            = $4
  , image_url          = $5
  , updated_at   	   = CURRENT_TIMESTAMP
WHERE id = $1
    RETURNING id
`

type UpdateHistoryParams struct {
	ID             string `db:"id"`
	Uid            string `db:"uid"`
	TotalKolestrol string `db:"total_kolestrol"`
	Tingkat        string `db:"tingkat"`
	ImageUrl       string `db:"image_url"`
}

func (q *Queries) UpdateHistory(ctx context.Context, arg UpdateHistoryParams) (string, error) {
	row := q.db.QueryRow(ctx, updateHistory,
		arg.ID,
		arg.Uid,
		arg.TotalKolestrol,
		arg.Tingkat,
		arg.ImageUrl,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
